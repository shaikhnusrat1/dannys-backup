{
	"name": "Agent_data_flow_copy1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "CustomersCsv"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "ProductCsv"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "OnlineTransactionsCsv"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "StoresCsv"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "InStoreTransactionsCsv"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "AgentCsv"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "CustomerServiceInteractionsCsv"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "LoyaltyAccountsCsv"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "LoyaltyTransactionsCsv"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "Customers",
					"rejectedDataLinkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					}
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "products"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "onlineTransactions"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "Stores"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "InStoreTransactions"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "agents"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "CustomerServiceInteractions"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "LoyaltyAccounts"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "LoyaltyTransactions"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "filter3"
				},
				{
					"name": "filter4"
				},
				{
					"name": "filter5"
				},
				{
					"name": "filter6"
				},
				{
					"name": "filter7"
				},
				{
					"name": "filter8"
				},
				{
					"name": "filter9"
				},
				{
					"name": "aggregate6"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "aggregate4"
				},
				{
					"name": "aggregate5"
				},
				{
					"name": "aggregate8"
				},
				{
					"name": "aggregate9"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as short,",
				"          Name as string,",
				"          Email as string,",
				"          Address as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'container11',",
				"     folderPath: 'PROJECT3/BRONZE',",
				"     fileName: 'Customers.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> CustomersCsv",
				"source(output(",
				"          ProductID as short,",
				"          Name as string,",
				"          Category as string,",
				"          Price as double",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'container11',",
				"     folderPath: 'PROJECT3/BRONZE',",
				"     fileName: 'Products.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> ProductCsv",
				"source(output(",
				"          OrderID as short,",
				"          CustomerID as short,",
				"          ProductID as short,",
				"          DateTime as timestamp,",
				"          PaymentMethod as string,",
				"          Amount as double,",
				"          Status as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'container11',",
				"     folderPath: 'PROJECT3/BRONZE',",
				"     fileName: 'OnlineTransactions.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> OnlineTransactionsCsv",
				"source(output(",
				"          StoreID as short,",
				"          Location as string,",
				"          Manager as string,",
				"          OpenHours as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'container11',",
				"     folderPath: 'PROJECT3/BRONZE',",
				"     fileName: 'Stores.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> StoresCsv",
				"source(output(",
				"          TransactionID as short,",
				"          CustomerID as short,",
				"          StoreID as short,",
				"          DateTime as timestamp,",
				"          Amount as double,",
				"          PaymentMethod as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'container11',",
				"     folderPath: 'PROJECT3/BRONZE',",
				"     fileName: 'InStoreTransactions.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> InStoreTransactionsCsv",
				"source(output(",
				"          AgentID as short,",
				"          Name as string,",
				"          Department as string,",
				"          Shift as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'container11',",
				"     folderPath: 'PROJECT3/BRONZE',",
				"     fileName: 'Agents.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> AgentCsv",
				"source(output(",
				"          InteractionID as short,",
				"          CustomerID as short,",
				"          DateTime as timestamp,",
				"          AgentID as short,",
				"          IssueType as string,",
				"          ResolutionStatus as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'container11',",
				"     folderPath: 'PROJECT3/BRONZE',",
				"     fileName: 'CustomerServiceInteractions.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> CustomerServiceInteractionsCsv",
				"source(output(",
				"          LoyaltyID as short,",
				"          CustomerID as short,",
				"          PointsEarned as short,",
				"          TierLevel as string,",
				"          JoinDate as date",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'container11',",
				"     folderPath: 'PROJECT3/BRONZE',",
				"     fileName: 'LoyaltyAccounts.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> LoyaltyAccountsCsv",
				"source(output(",
				"          LoyaltyID as short,",
				"          DateTime as timestamp,",
				"          PointsChange as short,",
				"          Reason as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'container11',",
				"     folderPath: 'PROJECT3/BRONZE',",
				"     fileName: 'LoyaltyTransactions.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> LoyaltyTransactionsCsv",
				"CustomersCsv filter(!isNull(CustomerID) || !isNull(Name) || !isNull(Email) || !isNull(Address)) ~> filter1",
				"ProductCsv filter(!isNull(ProductID) || !isNull(Name) || !isNull(Category) || !isNull(Price)) ~> filter2",
				"OnlineTransactionsCsv filter(!isNull(OrderID) || !isNull(CustomerID) || !isNull(ProductID) || !isNull(DateTime) || !isNull(PaymentMethod) || !isNull(Amount) || !isNull(Status)) ~> filter3",
				"StoresCsv filter(!isNull(StoreID) || !isNull(Location) || !isNull(Manager) || !isNull(OpenHours)) ~> filter4",
				"InStoreTransactionsCsv filter(!isNull(TransactionID) || !isNull(CustomerID) || !isNull(StoreID) || !isNull(DateTime) || !isNull(Amount) || !isNull(PaymentMethod)) ~> filter5",
				"AgentCsv filter(!isNull(AgentID) || !isNull(Name) || !isNull(Department) || !isNull(Shift)) ~> filter6",
				"CustomerServiceInteractionsCsv filter(!isNull(InteractionID)||!isNull(CustomerID) || !isNull(DateTime) || !isNull(AgentID) || !isNull(IssueType) || !isNull(ResolutionStatus)) ~> filter7",
				"LoyaltyAccountsCsv filter(!isNull(LoyaltyID) || !isNull(CustomerID) || !isNull(PointsEarned) || !isNull(TierLevel) || !isNull(JoinDate)) ~> filter8",
				"LoyaltyTransactionsCsv filter(!isNull(LoyaltyID) || !isNull(DateTime) || !isNull(PointsChange) || !isNull(Reason)) ~> filter9",
				"filter6 aggregate(groupBy(AgentID),",
				"     Name = first(Name),",
				"          Department = first(Department),",
				"          Shift = first(Shift)) ~> aggregate6",
				"filter1 aggregate(groupBy(CustomerID,",
				"          Name),",
				"     Email = first(Email),",
				"          Address = first(Address)) ~> aggregate1",
				"filter2 aggregate(groupBy(ProductID,",
				"          Name),",
				"     Category = first(Category),",
				"          Price = first(Price)) ~> aggregate2",
				"filter3 aggregate(groupBy(OrderID,",
				"          CustomerID,",
				"          ProductID),",
				"     DateTime = first(DateTime),",
				"          PaymentMethod = first(PaymentMethod),",
				"          Amount = first(Amount),",
				"          Status = first(Status)) ~> aggregate3",
				"filter4 aggregate(groupBy(StoreID),",
				"     Location = first(Location),",
				"          Manager = first(Manager),",
				"          OpenHours = first(OpenHours)) ~> aggregate4",
				"filter5 aggregate(groupBy(TransactionID,",
				"          CustomerID,",
				"          StoreID),",
				"     DateTime = first(DateTime),",
				"          Amount = first(Amount),",
				"          PaymentMethod = first(PaymentMethod)) ~> aggregate5",
				"filter8 aggregate(groupBy(LoyaltyID,",
				"          CustomerID),",
				"     PointsEarned = first(PointsEarned),",
				"          TierLevel = first(TierLevel),",
				"          JoinDate = first(JoinDate)) ~> aggregate8",
				"filter9 aggregate(groupBy(LoyaltyID),",
				"     DateTime = first(DateTime),",
				"          PointsChange = first(PointsChange),",
				"          Reason = first(Reason)) ~> aggregate9",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'Staging',",
				"     tableName: 'Customers',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CustomerID,",
				"          Name,",
				"          Email,",
				"          Address",
				"     )) ~> Customers",
				"aggregate2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'Staging',",
				"     tableName: 'Products',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     stagingSchemaName: '',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ProductID,",
				"          Name,",
				"          Category,",
				"          Price",
				"     )) ~> products",
				"aggregate3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'Staging',",
				"     tableName: 'OnlineTransactions',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     stagingSchemaName: '',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 3,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          OrderID,",
				"          CustomerID,",
				"          ProductID,",
				"          DateTime,",
				"          PaymentMethod,",
				"          Amount,",
				"          Status",
				"     )) ~> onlineTransactions",
				"aggregate4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'Staging',",
				"     tableName: 'Stores',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     stagingSchemaName: '',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 4,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          StoreID,",
				"          Location,",
				"          Manager,",
				"          OpenHours",
				"     )) ~> Stores",
				"aggregate5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'Staging',",
				"     tableName: 'InStoreTransactions',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     stagingSchemaName: '',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 5,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          TransactionID,",
				"          CustomerID,",
				"          StoreID,",
				"          DateTime,",
				"          Amount,",
				"          PaymentMethod",
				"     )) ~> InStoreTransactions",
				"aggregate6 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'Staging',",
				"     tableName: 'Agents',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     stagingSchemaName: '',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 6,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          AgentID,",
				"          Name,",
				"          Department,",
				"          Shift",
				"     )) ~> agents",
				"filter7 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'Staging',",
				"     tableName: 'CustomerServiceInteractions',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     stagingSchemaName: '',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 7,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          InteractionID,",
				"          CustomerID,",
				"          DateTime,",
				"          AgentID,",
				"          IssueType,",
				"          ResolutionStatus",
				"     )) ~> CustomerServiceInteractions",
				"aggregate8 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'Staging',",
				"     tableName: 'LoyaltyAccounts',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     stagingSchemaName: '',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 8,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          LoyaltyID,",
				"          CustomerID,",
				"          PointsEarned,",
				"          TierLevel,",
				"          JoinDate",
				"     )) ~> LoyaltyAccounts",
				"aggregate9 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'Staging',",
				"     tableName: 'LoyaltyTransactions',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     stagingSchemaName: '',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 9,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          LoyaltyID,",
				"          DateTime,",
				"          PointsChange,",
				"          Reason",
				"     )) ~> LoyaltyTransactions"
			]
		}
	}
}